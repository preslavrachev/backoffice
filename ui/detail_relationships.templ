package ui

import (
	"github.com/preslavrachev/backoffice/core"
	"fmt"
)

// CardBasedRelationshipPanel shows relationship info in a dedicated card with full context
templ CardBasedRelationshipPanel(item interface{}, field core.FieldInfo, resourceName string) {
	if field.Relationship != nil && field.Relationship.Type == core.RelationshipManyToOne {
		<div class="bg-white shadow-sm rounded-lg border border-gray-200">
			<div class="px-6 py-4 border-b border-gray-200">
				<div class="flex items-center justify-between">
					<h3 class="text-lg font-medium text-gray-900">{ field.DisplayName } Information</h3>
					<button 
						hx-get={ "/admin/" + resourceName + "/" + getRelationshipFieldValue(item, "ID") + "/change-" + field.Relationship.RelatedModel }
						hx-target="#relationship-editor"
						hx-swap="innerHTML"
						class="text-sm text-blue-600 hover:text-blue-500 font-medium">
						Change { field.DisplayName }
					</button>
				</div>
			</div>
			
			<div class="px-6 py-4">
				if relatedObj := core.GetFieldValue(item, field.Name); relatedObj != nil {
					<div class="flex items-start space-x-4">
						<!-- Visual indicator -->
						<div class="flex-shrink-0">
							<div class="w-12 h-12 rounded-lg bg-blue-100 flex items-center justify-center">
								<svg class="w-6 h-6 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
									<path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"></path>
								</svg>
							</div>
						</div>
						
						<!-- Relationship details -->
						<div class="flex-1 min-w-0">
							<div class="flex items-center space-x-2">
								<h4 class="text-lg font-medium text-gray-900">{ getRelatedDisplayValue(item, field.Name, field.Relationship.DisplayField) }</h4>
								<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
									Active
								</span>
							</div>
							
							<div class="mt-1 grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
								if location := getRelatedDisplayValue(item, field.Name, "Location"); location != "" {
									<div>
										<dt class="font-medium text-gray-500">Location</dt>
										<dd class="mt-1 text-gray-900">{ location }</dd>
									</div>
								}
								if manager := getRelatedDisplayValue(item, field.Name, "Manager.Name"); manager != "" {
									<div>
										<dt class="font-medium text-gray-500">Manager</dt>
										<dd class="mt-1 text-gray-900">{ manager }</dd>
									</div>
								}
								if memberCount := getRelatedDisplayValue(item, field.Name, "MemberCount"); memberCount != "" {
									<div>
										<dt class="font-medium text-gray-500">Team Size</dt>
										<dd class="mt-1 text-gray-900">{ memberCount } members</dd>
									</div>
								}
								if budget := getRelatedDisplayValue(item, field.Name, "Budget"); budget != "" {
									<div>
										<dt class="font-medium text-gray-500">Budget</dt>
										<dd class="mt-1 text-gray-900">${ budget }</dd>
									</div>
								}
							</div>
						</div>
					</div>
				} else {
					<div class="text-center py-6">
						<div class="w-12 h-12 mx-auto rounded-lg bg-gray-100 flex items-center justify-center">
							<svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
							</svg>
						</div>
						<h4 class="mt-2 text-sm font-medium text-gray-900">No { field.DisplayName } assigned</h4>
						<p class="mt-1 text-sm text-gray-500">Get started by assigning a { field.Relationship.RelatedModel }.</p>
					</div>
				}
			</div>
			
			<!-- Quick actions -->
			<div class="px-6 py-3 bg-gray-50 border-t border-gray-200">
				<div class="flex space-x-3">
					if relatedObj := core.GetFieldValue(item, field.Name); relatedObj != nil {
						<button 
							hx-get={ "/admin/" + field.Relationship.RelatedModel + "/" + getRelationshipFieldValue(item, field.Relationship.ForeignKey) }
							hx-target="#main-content"
							class="text-sm text-blue-600 hover:text-blue-500 font-medium">
							View { field.DisplayName } Details
						</button>
						<button 
							hx-get={ "/admin/" + resourceName + "?" + field.Relationship.ForeignKey + "=" + getRelationshipFieldValue(item, field.Relationship.ForeignKey) }
							hx-target="#main-content"
							class="text-sm text-gray-600 hover:text-gray-500">
							View All { field.DisplayName } Members
						</button>
					} else {
						<button 
							hx-get={ "/admin/" + resourceName + "/" + getRelationshipFieldValue(item, "ID") + "/assign-" + field.Relationship.RelatedModel }
							hx-target="#relationship-editor"
							hx-swap="innerHTML"
							class="text-sm text-blue-600 hover:text-blue-500 font-medium">
							Assign { field.DisplayName }
						</button>
					}
				</div>
			</div>
		</div>
	}
}

// InlineRelationshipEditor shows relationship with inline editing capabilities
templ InlineRelationshipEditor(item interface{}, field core.FieldInfo, resourceName string) {
	if field.Relationship != nil && field.Relationship.Type == core.RelationshipManyToOne {
		<div class="bg-white shadow-sm rounded-lg border border-gray-200">
			<div class="px-6 py-4 border-b border-gray-200">
				<h3 class="text-lg font-medium text-gray-900">{ field.DisplayName } Assignment</h3>
			</div>
			
			<div id={ field.Name + "-assignment" } class="px-6 py-4">
				if relatedObj := core.GetFieldValue(item, field.Name); relatedObj != nil {
					<!-- Default state: show current relationship -->
					<div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
						<div class="flex items-center space-x-3">
							<div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
								<span class="text-sm font-medium text-blue-700">{ getInitials(getRelatedDisplayValue(item, field.Name, field.Relationship.DisplayField)) }</span>
							</div>
							<div>
								<div class="font-medium text-gray-900">{ getRelatedDisplayValue(item, field.Name, field.Relationship.DisplayField) }</div>
								<div class="text-sm text-gray-500">{ getRelatedDisplayValue(item, field.Name, "Location") } â€¢ { getRelatedDisplayValue(item, field.Name, "MemberCount") } members</div>
							</div>
						</div>
						
						<button 
							hx-get={ "/admin/" + resourceName + "/" + getRelationshipFieldValue(item, "ID") + "/" + field.Name + "-editor" }
							hx-target={ "#" + field.Name + "-assignment" }
							hx-swap="innerHTML"
							class="px-3 py-1 text-sm font-medium text-blue-600 hover:text-blue-500 border border-blue-200 rounded hover:bg-blue-50">
							Change
						</button>
					</div>
					
					<!-- Relationship metadata -->
					<div class="mt-4 grid grid-cols-2 gap-4 text-sm">
						if assignedAt := getRelatedDisplayValue(item, field.Name, "AssignedAt"); assignedAt != "" {
							<div>
								<span class="text-gray-500">Assigned:</span>
								<span class="ml-2 text-gray-900">{ assignedAt }</span>
							</div>
						}
						if role := getRelatedDisplayValue(item, field.Name, "Role"); role != "" {
							<div>
								<span class="text-gray-500">Role:</span>
								<span class="ml-2 text-gray-900">{ role }</span>
							</div>
						}
					</div>
				} else {
					<!-- No relationship assigned state -->
					<div class="text-center py-8">
						<div class="w-12 h-12 mx-auto rounded-lg bg-gray-100 flex items-center justify-center">
							<svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
							</svg>
						</div>
						<h4 class="mt-2 text-sm font-medium text-gray-900">No { field.DisplayName }</h4>
						<p class="mt-1 text-sm text-gray-500">Assign this item to a { field.Relationship.RelatedModel }.</p>
						<button 
							hx-get={ "/admin/" + resourceName + "/" + getRelationshipFieldValue(item, "ID") + "/" + field.Name + "-editor" }
							hx-target={ "#" + field.Name + "-assignment" }
							hx-swap="innerHTML"
							class="mt-4 px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded hover:bg-blue-100">
							Assign { field.DisplayName }
						</button>
					</div>
				}
			</div>
		</div>
	}
}

// SidebarRelationshipSummary shows relationship in a compact sidebar format
templ SidebarRelationshipSummary(item interface{}, field core.FieldInfo, resourceName string) {
	if field.Relationship != nil && field.Relationship.Type == core.RelationshipManyToOne {
		<div class="bg-white shadow-sm rounded-lg border border-gray-200">
			<div class="px-4 py-5 sm:p-6">
				<h3 class="text-sm font-medium text-gray-900 mb-4">{ field.DisplayName }</h3>
				
				if relatedObj := core.GetFieldValue(item, field.Name); relatedObj != nil {
					<!-- Compact relationship display -->
					<div class="flex items-center space-x-3 mb-4">
						<div class="flex-shrink-0">
							<div class="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center">
								<span class="text-xs font-medium text-white">{ getInitials(getRelatedDisplayValue(item, field.Name, field.Relationship.DisplayField)) }</span>
							</div>
						</div>
						<div class="min-w-0 flex-1">
							<p class="text-sm font-medium text-gray-900 truncate">{ getRelatedDisplayValue(item, field.Name, field.Relationship.DisplayField) }</p>
							<p class="text-xs text-gray-500 truncate">{ getRelatedDisplayValue(item, field.Name, "Location") }</p>
						</div>
					</div>
					
					<!-- Key metrics -->
					<dl class="space-y-3">
						if memberCount := getRelatedDisplayValue(item, field.Name, "MemberCount"); memberCount != "" {
							<div>
								<dt class="text-xs font-medium text-gray-500 uppercase tracking-wide">Team Size</dt>
								<dd class="text-sm text-gray-900">{ memberCount } members</dd>
							</div>
						}
						if manager := getRelatedDisplayValue(item, field.Name, "Manager.Name"); manager != "" {
							<div>
								<dt class="text-xs font-medium text-gray-500 uppercase tracking-wide">Manager</dt>
								<dd class="text-sm text-gray-900">{ manager }</dd>
							</div>
						}
					</dl>
					
					<!-- Action buttons -->
					<div class="mt-5 space-y-2">
						<button 
							hx-get={ "/admin/" + resourceName + "/" + getRelationshipFieldValue(item, "ID") + "/change-" + field.Relationship.RelatedModel }
							hx-target="#modal-container"
							class="w-full flex justify-center py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
							Change { field.DisplayName }
						</button>
						<button 
							hx-get={ "/admin/" + field.Relationship.RelatedModel + "/" + getRelationshipFieldValue(item, field.Relationship.ForeignKey) }
							hx-target="#main-content"
							class="w-full flex justify-center py-2 px-3 text-sm font-medium text-blue-600 hover:text-blue-500">
							View { field.DisplayName }
						</button>
					</div>
				} else {
					<!-- No relationship state -->
					<div class="text-center">
						<div class="w-8 h-8 mx-auto rounded-full bg-gray-100 flex items-center justify-center">
							<svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
							</svg>
						</div>
						<h4 class="mt-2 text-xs font-medium text-gray-900">No { field.DisplayName }</h4>
						<button 
							hx-get={ "/admin/" + resourceName + "/" + getRelationshipFieldValue(item, "ID") + "/assign-" + field.Relationship.RelatedModel }
							hx-target="#modal-container"
							class="mt-3 w-full flex justify-center py-2 px-3 border border-gray-300 rounded-md shadow-sm text-xs font-medium text-gray-700 bg-white hover:bg-gray-50">
							Assign { field.DisplayName }
						</button>
					</div>
				}
			</div>
		</div>
	}
}
// Helper function to get related field display value
func getRelatedDisplayValue(item interface{}, fieldName string, displayField string) string {
	if relatedObj := core.GetFieldValue(item, fieldName); relatedObj != nil {
		if displayValue := core.GetFieldValue(relatedObj, displayField); displayValue != nil {
			return formatRelationshipFieldValue(displayValue)
		}
	}
	return ""
}

// getInitials safely extracts first 2 characters or returns default
func getInitials(text string) string {
	if len(text) >= 2 {
		return text[:2]
	}
	if len(text) == 1 {
		return text
	}
	return "?"
}

// Helper function to get field value as string for HTML attributes  
func getRelationshipFieldValue(item interface{}, fieldName string) string {
	if value := core.GetFieldValue(item, fieldName); value != nil {
		return formatRelationshipFieldValue(value)
	}
	return ""
}

// Helper function to format field values for display
func formatRelationshipFieldValue(value interface{}) string {
	if value == nil {
		return ""
	}
	
	switch v := value.(type) {
	case string:
		return v
	case int, int8, int16, int32, int64:
		return fmt.Sprintf("%d", v)
	case uint, uint8, uint16, uint32, uint64:
		return fmt.Sprintf("%d", v)
	case float32, float64:
		return fmt.Sprintf("%.2f", v)
	case bool:
		if v {
			return "Yes"
		}
		return "No"
	default:
		return fmt.Sprintf("%v", v)
	}
}
