package ui

import "github.com/preslavrachev/backoffice/core"
import "fmt"

templ Detail(resource *core.Resource, item interface{}) {
	<div class="bg-white shadow rounded-lg">
		<div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
			<div>
				<h2 class="text-lg font-medium text-gray-900 capitalize">
					{ resource.DisplayName } Details
				</h2>
			</div>
			<div class="flex space-x-2">
				<a href={ templ.URL("/admin/" + resource.Name) } 
				   class="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 transition-colors">‚Üê Back to List</a>
				<a href={ templ.URL("/admin/" + resource.Name + "/" + fmt.Sprintf("%v", core.GetFieldValue(item, resource.IDField)) + "/edit") } 
				   class="bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700 transition-colors">Edit</a>
				@DeleteButton(resource, item)
			</div>
		</div>
		
		<div class="grid grid-cols-1 lg:grid-cols-3 gap-6 p-6">
			<!-- Main content - regular fields -->
			<div class="lg:col-span-2">
				<div class="bg-white shadow-sm rounded-lg border border-gray-200 p-6">
					<h3 class="text-lg font-medium text-gray-900 mb-4">{ resource.DisplayName } Information</h3>
					<dl class="grid grid-cols-1 gap-x-4 gap-y-4 sm:grid-cols-2">
						for _, field := range resource.Fields {
							if field.Relationship == nil || field.Relationship.Type == core.RelationshipNone {
								<div>
									<dt class="text-sm font-medium text-gray-500">{ field.DisplayName }</dt>
									<dd class="mt-1 text-sm text-gray-900">
										if field.PrimaryKey {
											<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
												ID: { fmt.Sprintf("%v", core.GetFieldValue(item, field.Name)) }
											</span>
										} else if field.RenderAs == core.RenderHTML || field.RenderAs == core.RenderRichText {
											// For HTML fields, render the full HTML in detail view
											<div class="prose prose-sm max-w-none">
												@templ.Raw(fmt.Sprintf("%v", core.GetFieldValue(item, field.Name)))
											</div>
										} else {
											@FormatFieldValue(field, core.GetFieldValue(item, field.Name))
										}
									</dd>
								</div>
							}
						}
					</dl>
				</div>
				
				<!-- Inline relationship editors for complex relationships -->
				for _, field := range resource.Fields {
					if field.Relationship != nil && field.Relationship.Type == core.RelationshipManyToOne && field.Relationship.DisplayPattern == "inline" {
						<div class="mt-6">
							@InlineRelationshipEditor(item, field, resource.Name)
						</div>
					}
				}
			</div>
			
			<!-- Sidebar - relationship information -->
			<div class="space-y-6">
				for _, field := range resource.Fields {
					if field.Relationship != nil && field.Relationship.Type == core.RelationshipManyToOne {
						if field.Relationship.DisplayPattern == "card" {
							@CardBasedRelationshipPanel(item, field, resource.Name)
						} else if field.Relationship.DisplayPattern != "inline" {
							// Default to sidebar summary for relationships
							@SidebarRelationshipSummary(item, field, resource.Name)
						}
					}
				}
				
				<!-- If no relationships, show a placeholder or other info -->
				if !hasRelationshipFields(resource) {
					<div class="bg-white shadow-sm rounded-lg border border-gray-200 p-6">
						<h3 class="text-sm font-medium text-gray-900 mb-2">Quick Actions</h3>
						<div class="space-y-2">
							<button 
								hx-get={ "/admin/api/" + resource.Name + "/" + fmt.Sprintf("%v", core.GetFieldValue(item, resource.IDField)) + "/edit" }
								hx-target="body"
								hx-swap="beforeend"
								class="w-full flex justify-center py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
								Edit { resource.DisplayName }
							</button>
						</div>
					</div>
				}
			</div>
		</div>
		
		<!-- Hidden containers for dynamic content -->
		<div id="relationship-editor"></div>
		<div id="detail-panel"></div>
		<div id="edit-panel"></div>
		<div id="modal-container"></div>
	</div>
}

templ DeleteButton(resource *core.Resource, item interface{}) {
	<form method="POST" 
		  x-data="{ showModal: false, deleting: false }"
		  @submit="if (!confirm('Are you sure you want to delete this ' + '{ resource.DisplayName }' + '? This action cannot be undone.')) { event.preventDefault() }">
		<input type="hidden" name="_method" value="DELETE"/>
		<button type="submit"
				:disabled="deleting"
				class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 disabled:opacity-50 transition-colors">
			<span x-show="!deleting">Delete</span>
			<span x-show="deleting" x-transition>Deleting...</span>
		</button>
	</form>
}

templ FormatFieldValue(field core.FieldInfo, value interface{}) {
	switch field.Type {
		case "bool":
			if fmt.Sprintf("%v", value) == "true" {
				<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
					Yes
				</span>
			} else {
				<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
					No
				</span>
			}
		case "time.Time":
			<span class="text-gray-900">{ fmt.Sprintf("%v", value) }</span>
		default:
			<span class="text-gray-900">
				if value != nil {
					{ fmt.Sprintf("%v", value) }
				} else {
					<span class="text-gray-400 italic">N/A</span>
				}
			</span>
	}
}

// Helper function to check if resource has relationship fields
func hasRelationshipFields(resource *core.Resource) bool {
	for _, field := range resource.Fields {
		if field.Relationship != nil && field.Relationship.Type != core.RelationshipNone {
			return true
		}
	}
	return false
}