package ui

import "github.com/preslavrachev/backoffice/core"
import "fmt"

templ Form(resource *core.Resource, item interface{}, isEdit bool) {
	<div class="max-w-2xl mx-auto">
		<div class="bg-white shadow-sm border border-gray-200 rounded-lg overflow-hidden">
			<div class="px-6 py-5 border-b border-gray-200">
				<div class="flex items-center justify-between">
					<div>
						<h1 class="text-2xl font-semibold text-gray-900">
							if isEdit {
								Edit { resource.DisplayName }
							} else {
								Create { resource.DisplayName }
							}
						</h1>
						<p class="mt-1 text-sm text-gray-500">
							if isEdit {
								Update the information below and click save when you're done.
							} else {
								Fill out the form below to create a new { resource.DisplayName }.
							}
						</p>
					</div>
					<button type="button" 
					        onclick="window.history.back()" 
					        class="text-gray-400 hover:text-gray-500 p-2">
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				</div>
			</div>
			
			<div class="px-6 py-6">
				if isEdit && item != nil {
					<form method="POST" action={ templ.URL("/admin/" + resource.Name + "/" + fmt.Sprintf("%v", core.GetFieldValue(item, resource.IDField)) + "/edit") } 
					      class="space-y-6" x-data="{ loading: false }" 
					      @submit="loading = true">
						<input type="hidden" name="_method" value="PUT"/>
						@FormFields(resource, item, isEdit)
						@FormButtons(resource.DisplayName, isEdit)
					</form>
				} else {
					<form method="POST" action={ templ.URL("/admin/" + resource.Name) } 
					      class="space-y-6" x-data="{ loading: false }" 
					      @submit="loading = true">
						@FormFields(resource, item, isEdit)
						@FormButtons(resource.DisplayName, isEdit)
					</form>
				}
			</div>
		</div>
	</div>
}

templ FormFields(resource *core.Resource, item interface{}, isEdit bool) {
	for _, field := range resource.Fields {
		if !field.PrimaryKey {
			<div class="space-y-1" data-pw={ "field-group-" + field.Name }>
				<label for={ field.Name } class="block text-sm font-medium text-gray-700" data-pw={ "label-" + field.Name }>
					{ field.DisplayName }
					if field.Required {
						<span class="text-red-500 ml-1">*</span>
					}
				</label>
				<div>
					@FormField(field, getFieldValue(item, field.Name, isEdit))
				</div>
				if field.Type != "" {
					<p class="text-xs text-gray-500">Type: { field.Type }</p>
				}
			</div>
		}
	}
}

func getFieldValue(item interface{}, fieldName string, isEdit bool) string {
	if isEdit && item != nil {
		return fmt.Sprintf("%v", core.GetFieldValue(item, fieldName))
	}
	return ""
}

templ FormField(field core.FieldInfo, value string) {
	switch field.Type {
		case "bool":
			<div class="flex items-center">
				<input type="checkbox" 
				       name={ field.Name } 
				       id={ field.Name }
				       value="true"
				       if value == "true" {
				       	checked
				       }
				       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" data-pw={ "input-" + field.Name }/>
			</div>
		case "int", "int32", "int64", "uint", "uint32", "uint64":
			<input type="number" 
			       name={ field.Name } 
			       id={ field.Name }
			       value={ value }
			       if field.Required {
			       	required
			       }
			       if field.ReadOnly {
			       	readonly
			       }
			       class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" data-pw={ "input-" + field.Name }/>
		case "float32", "float64":
			<input type="number" 
			       step="0.01"
			       name={ field.Name } 
			       id={ field.Name }
			       value={ value }
			       if field.Required {
			       	required
			       }
			       if field.ReadOnly {
			       	readonly
			       }
			       class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" data-pw={ "input-" + field.Name }/>
		case "time.Time":
			<input type="datetime-local" 
			       name={ field.Name } 
			       id={ field.Name }
			       value={ value }
			       if field.Required {
			       	required
			       }
			       if field.ReadOnly {
			       	readonly
			       }
			       class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" data-pw={ "input-" + field.Name }/>
		default:
			<input type="text" 
			       name={ field.Name } 
			       id={ field.Name }
			       value={ value }
			       if field.Required {
			       	required
			       }
			       if field.ReadOnly {
			       	readonly
			       }
			       class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" data-pw={ "input-" + field.Name }/>
	}
}

templ FormButtons(displayName string, isEdit bool) {
	<div class="flex justify-end space-x-3 pt-6 border-t border-gray-200" data-pw="form-buttons">
		<button type="button" 
		        @click="window.history.back()"
		        class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" data-pw="cancel-button">
			Cancel
		</button>
		<button type="submit" 
		        :disabled="loading"
		        :class="loading ? 'opacity-50 cursor-not-allowed' : ''"
		        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" data-pw="submit-button">
			<span x-show="loading" class="animate-spin -ml-1 mr-2 h-4 w-4 text-white">
				<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
					<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
				</svg>
			</span>
			if isEdit {
				<span>Update { displayName }</span>
			} else {
				<span>Create { displayName }</span>
			}
		</button>
	</div>
}