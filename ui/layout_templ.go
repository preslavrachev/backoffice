// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package ui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import (
	"backoffice/middleware/auth"

	"github.com/a-h/templ"
	templruntime "github.com/a-h/templ/runtime"
)

func Layout(title string, content templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = LayoutWithAuth(title, content, nil).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func LayoutWithAuth(title string, content templ.Component, user *auth.AuthUser) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `ui/layout.templ`, Line: 15, Col: 16}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, " - BackOffice Admin</title><script src=\"https://cdn.tailwindcss.com\"></script><script src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\" defer></script><script src=\"https://unpkg.com/htmx.org@1.9.12\"></script><style>\n\t\t\t/* Row highlight animation */\n\t\t\t@keyframes highlightFade {\n\t\t\t\t0% { background-color: rgba(147, 197, 253, 0.8); } /* light blue */\n\t\t\t\t50% { background-color: rgba(147, 197, 253, 0.4); } /* medium blue */\n\t\t\t\t100% { background-color: transparent; } /* fade to normal */\n\t\t\t}\n\t\t\t\n\t\t\t.highlight-created {\n\t\t\t\tanimation: highlightFade 2s ease-out;\n\t\t\t}\n\t\t\t\n\t\t\t.highlight-updated {\n\t\t\t\tanimation: highlightFade 2s ease-out;\n\t\t\t}\n\t\t</style></head><body class=\"bg-gray-100\"><div class=\"min-h-screen\"><!-- Header --><header class=\"bg-white shadow\"><div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\"><div class=\"flex justify-between items-center py-6\"><div><h1 class=\"text-3xl font-bold text-gray-900\"><a href=\"/admin\" class=\"hover:text-gray-700\" data-pw=\"admin-home-link\">BackOffice Admin</a></h1><p class=\"text-sm text-gray-500\">Admin Panel</p></div><div class=\"flex items-center space-x-4\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if user != nil {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"text-sm text-gray-700\"><span>Welcome, ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(user.Username)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `ui/layout.templ`, Line: 51, Col: 39}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</span></div><a href=\"/admin/logout\" class=\"text-sm text-red-600 hover:text-red-800 underline\" data-pw=\"logout-link\">Logout</a>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<div class=\"text-sm text-gray-500\"><span>Go Admin Panel</span></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</div></div></div></header><!-- Main Content --><main class=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\"><div class=\"px-4 py-6 sm:px-0\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</div></main></div><!-- Toast Container --><div id=\"toast-container\" class=\"fixed top-4 right-4 z-[9999]\" data-pw=\"toast-container\"></div><script>\n\t\t\t// Toast notification system\n\t\t\tfunction showToast(message, type) {\n\t\t\t\ttype = type || 'success';\n\t\t\t\tconst toast = document.createElement('div');\n\t\t\t\tconst bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';\n\t\t\t\tconst icon = type === 'success' ? \n\t\t\t\t\t'<svg class=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\"></path></svg>' :\n\t\t\t\t\t'<svg class=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\"></path></svg>';\n\t\t\t\t\n\t\t\t\ttoast.className = bgColor + ' text-white px-6 py-3 rounded-lg shadow-lg mb-2 transform transition-all duration-300 translate-x-full opacity-0 flex items-center';\n\t\t\t\ttoast.innerHTML = icon + '<span>' + message + '</span>';\n\t\t\t\t\n\t\t\t\tdocument.getElementById('toast-container').appendChild(toast);\n\t\t\t\t\n\t\t\t\t// Trigger animation\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\ttoast.classList.remove('translate-x-full', 'opacity-0');\n\t\t\t\t}, 100);\n\t\t\t\t\n\t\t\t\t// Remove toast after 4 seconds\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\ttoast.classList.add('translate-x-full', 'opacity-0');\n\t\t\t\t\tsetTimeout(function() { toast.remove(); }, 300);\n\t\t\t\t}, 4000);\n\t\t\t}\n\n\t\t\t// Handle HTMX trigger events for toasts\n\t\t\tdocument.body.addEventListener('showToast', function(evt) {\n\t\t\t\tconsole.log('🍞 DEBUG: showToast event triggered', evt.detail);\n\t\t\t\tif (evt.detail && evt.detail.message) {\n\t\t\t\t\tshowToast(evt.detail.message, evt.detail.type || 'success');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Handle refreshList event to reload the current page\n\t\t\tdocument.body.addEventListener('refreshList', function(evt) {\n\t\t\t\tconsole.log('🔄 DEBUG: refreshList event triggered');\n\t\t\t\t// Close any open side panes first\n\t\t\t\tconst sidePane = document.getElementById('sidepane-overlay');\n\t\t\t\tif (sidePane) {\n\t\t\t\t\tconsole.log('🔄 DEBUG: Closing side pane');\n\t\t\t\t\t// Trigger Alpine.js close animation\n\t\t\t\t\tconst alpineData = Alpine.$data(sidePane.querySelector('[x-data]'));\n\t\t\t\t\tif (alpineData) {\n\t\t\t\t\t\talpineData.show = false;\n\t\t\t\t\t\tsetTimeout(() => sidePane.remove(), 300);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsidePane.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Refresh the page content after a short delay to allow side pane to close\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconsole.log('🔄 DEBUG: Reloading page');\n\t\t\t\t\twindow.location.reload();\n\t\t\t\t}, 300);\n\t\t\t});\n\n\t\t\t// Handle HTMX response error events\n\t\t\tdocument.body.addEventListener('htmx:responseError', function(evt) {\n\t\t\t\tshowToast('An error occurred while processing your request.', 'error');\n\t\t\t});\n\n\t\t\t// Handle HTMX network error events\n\t\t\tdocument.body.addEventListener('htmx:sendError', function(evt) {\n\t\t\t\tshowToast('Network error. Please check your connection.', 'error');\n\t\t\t});\n\n\t\t\t// Handle item highlighting and success messages on page load\n\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t// Check for URL parameters for success messages (legacy)\n\t\t\t\tconst urlParams = new URLSearchParams(window.location.search);\n\t\t\t\tconst successType = urlParams.get('success');\n\t\t\t\tconst resourceName = urlParams.get('resource');\n\t\t\t\t\n\t\t\t\tif (successType === 'delete' && resourceName) {\n\t\t\t\t\tshowToast(resourceName + ' deleted successfully', 'success');\n\t\t\t\t\t// Clean up URL by removing the parameters\n\t\t\t\t\turlParams.delete('success');\n\t\t\t\t\turlParams.delete('resource');\n\t\t\t\t\tconst newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');\n\t\t\t\t\thistory.replaceState(null, '', newUrl);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Handle item highlighting after create/update\n\t\t\t\tconst highlightItemId = sessionStorage.getItem('highlightItemId');\n\t\t\t\tconst highlightAction = sessionStorage.getItem('highlightAction');\n\t\t\t\t\n\t\t\t\tif (highlightItemId && highlightAction) {\n\t\t\t\t\tconsole.log('🎨 DEBUG: Highlighting item', highlightItemId, 'action:', highlightAction);\n\t\t\t\t\t\n\t\t\t\t\t// Clear the session storage\n\t\t\t\t\tsessionStorage.removeItem('highlightItemId');\n\t\t\t\t\tsessionStorage.removeItem('highlightAction');\n\t\t\t\t\t\n\t\t\t\t\t// Find the row with the matching ID and highlight it\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t// Look for table rows containing links with the item ID\n\t\t\t\t\t\tconst rows = document.querySelectorAll('tr');\n\t\t\t\t\t\tfor (const row of rows) {\n\t\t\t\t\t\t\tconst links = row.querySelectorAll('a[href*=\"/' + highlightItemId + '\"]');\n\t\t\t\t\t\t\tif (links.length > 0) {\n\t\t\t\t\t\t\t\tconsole.log('🎨 DEBUG: Found row to highlight', row);\n\t\t\t\t\t\t\t\trow.classList.add('highlight-' + highlightAction);\n\t\t\t\t\t\t\t\t// Scroll the row into view\n\t\t\t\t\t\t\t\trow.scrollIntoView({ behavior: 'smooth', block: 'center' });\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 100); // Small delay to ensure DOM is fully loaded\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Global table sorting function\n\t\t\tfunction sortTable(fieldName) {\n\t\t\t\tconsole.log('🔍 DEBUG: Sorting by field:', fieldName);\n\t\t\t\tconst urlParams = new URLSearchParams(window.location.search);\n\t\t\t\tconst currentSort = urlParams.get('sort');\n\t\t\t\tconst currentDirection = urlParams.get('direction') || 'asc';\n\t\t\t\t\n\t\t\t\tconsole.log('🔍 DEBUG: Current sort:', currentSort, 'direction:', currentDirection);\n\t\t\t\t\n\t\t\t\t// If clicking the same field, toggle direction\n\t\t\t\tif (currentSort === fieldName) {\n\t\t\t\t\tconst newDirection = currentDirection === 'asc' ? 'desc' : 'asc';\n\t\t\t\t\turlParams.set('direction', newDirection);\n\t\t\t\t\tconsole.log('🔍 DEBUG: Toggling direction to:', newDirection);\n\t\t\t\t} else {\n\t\t\t\t\t// New field, start with ascending\n\t\t\t\t\turlParams.set('sort', fieldName);\n\t\t\t\t\turlParams.set('direction', 'asc');\n\t\t\t\t\tconsole.log('🔍 DEBUG: Setting new sort field:', fieldName, 'direction: asc');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Reset pagination when sorting changes\n\t\t\t\turlParams.delete('offset');\n\t\t\t\t\n\t\t\t\tconst newURL = urlParams.toString();\n\t\t\t\tconsole.log('🔍 DEBUG: Navigating to:', newURL);\n\t\t\t\t\n\t\t\t\t// Navigate to new URL\n\t\t\t\twindow.location.search = newURL;\n\t\t\t}\n\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
