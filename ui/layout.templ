package ui

import "github.com/preslavrachev/backoffice/middleware/auth"

templ Layout(title string, content templ.Component) {
	@LayoutWithAuth(title, content, nil)
}

templ LayoutWithAuth(title string, content templ.Component, user *auth.AuthUser) {
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>{ title } - BackOffice Admin</title>
		<script src="https://cdn.tailwindcss.com"></script>
		<script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
		<script src="https://unpkg.com/htmx.org@1.9.12"></script>
		<style>
			/* Row highlight animation */
			@keyframes highlightFade {
				0% { background-color: rgba(147, 197, 253, 0.8); } /* light blue */
				50% { background-color: rgba(147, 197, 253, 0.4); } /* medium blue */
				100% { background-color: transparent; } /* fade to normal */
			}
			
			.highlight-created {
				animation: highlightFade 2s ease-out;
			}
			
			.highlight-updated {
				animation: highlightFade 2s ease-out;
			}
		</style>
	</head>
	<body class="bg-gray-100">
		<div class="min-h-screen">
			<!-- Header -->
			<header class="bg-white shadow">
				<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div class="flex justify-between items-center py-6">
						<div>
							<h1 class="text-3xl font-bold text-gray-900">
								<a href="/admin" class="hover:text-gray-700" data-pw="admin-home-link">BackOffice Admin</a>
							</h1>
							<p class="text-sm text-gray-500">Admin Panel</p>
						</div>
						<div class="flex items-center space-x-4">
							if user != nil {
								<div class="text-sm text-gray-700">
									<span>Welcome, { user.Username }</span>
								</div>
								<a href="/admin/logout" class="text-sm text-red-600 hover:text-red-800 underline" data-pw="logout-link">
									Logout
								</a>
							} else {
								<div class="text-sm text-gray-500">
									<span>Go Admin Panel</span>
								</div>
							}
						</div>
					</div>
				</div>
			</header>
			
			<!-- Main Content -->
			<main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
				<div class="px-4 py-6 sm:px-0">
					@content
				</div>
			</main>
		</div>
		
		<!-- Toast Container -->
		<div id="toast-container" class="fixed top-4 right-4 z-[9999]" data-pw="toast-container">
		</div>

		<script>
			// Toast notification system
			function showToast(message, type) {
				type = type || 'success';
				const toast = document.createElement('div');
				const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
				const icon = type === 'success' ? 
					'<svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>' :
					'<svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>';
				
				toast.className = bgColor + ' text-white px-6 py-3 rounded-lg shadow-lg mb-2 transform transition-all duration-300 translate-x-full opacity-0 flex items-center';
				toast.innerHTML = icon + '<span>' + message + '</span>';
				
				document.getElementById('toast-container').appendChild(toast);
				
				// Trigger animation
				setTimeout(function() {
					toast.classList.remove('translate-x-full', 'opacity-0');
				}, 100);
				
				// Remove toast after 4 seconds
				setTimeout(function() {
					toast.classList.add('translate-x-full', 'opacity-0');
					setTimeout(function() { toast.remove(); }, 300);
				}, 4000);
			}

			// Handle HTMX trigger events for toasts
			document.body.addEventListener('showToast', function(evt) {
				console.log('üçû DEBUG: showToast event triggered', evt.detail);
				if (evt.detail && evt.detail.message) {
					showToast(evt.detail.message, evt.detail.type || 'success');
				}
			});

			// Handle refreshList event to reload the current page
			document.body.addEventListener('refreshList', function(evt) {
				console.log('üîÑ DEBUG: refreshList event triggered');
				// Close any open side panes first
				const sidePane = document.getElementById('sidepane-overlay');
				if (sidePane) {
					console.log('üîÑ DEBUG: Closing side pane');
					// Trigger Alpine.js close animation
					const alpineData = Alpine.$data(sidePane.querySelector('[x-data]'));
					if (alpineData) {
						alpineData.show = false;
						setTimeout(() => sidePane.remove(), 300);
					} else {
						sidePane.remove();
					}
				}
				
				// Refresh the page content after a short delay to allow side pane to close
				setTimeout(() => {
					console.log('üîÑ DEBUG: Reloading page');
					window.location.reload();
				}, 300);
			});

			// Handle HTMX response error events
			document.body.addEventListener('htmx:responseError', function(evt) {
				showToast('An error occurred while processing your request.', 'error');
			});

			// Handle HTMX network error events
			document.body.addEventListener('htmx:sendError', function(evt) {
				showToast('Network error. Please check your connection.', 'error');
			});

			// Handle item highlighting and success messages on page load
			document.addEventListener('DOMContentLoaded', function() {
				// Check for URL parameters for success messages (legacy)
				const urlParams = new URLSearchParams(window.location.search);
				const successType = urlParams.get('success');
				const resourceName = urlParams.get('resource');
				
				if (successType === 'delete' && resourceName) {
					showToast(resourceName + ' deleted successfully', 'success');
					// Clean up URL by removing the parameters
					urlParams.delete('success');
					urlParams.delete('resource');
					const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');
					history.replaceState(null, '', newUrl);
				}
				
				// Handle item highlighting after create/update
				const highlightItemId = sessionStorage.getItem('highlightItemId');
				const highlightAction = sessionStorage.getItem('highlightAction');
				
				if (highlightItemId && highlightAction) {
					console.log('üé® DEBUG: Highlighting item', highlightItemId, 'action:', highlightAction);
					
					// Clear the session storage
					sessionStorage.removeItem('highlightItemId');
					sessionStorage.removeItem('highlightAction');
					
					// Find the row with the matching ID and highlight it
					setTimeout(() => {
						// Look for table rows containing links with the item ID
						const rows = document.querySelectorAll('tr');
						for (const row of rows) {
							const links = row.querySelectorAll('a[href*="/' + highlightItemId + '"]');
							if (links.length > 0) {
								console.log('üé® DEBUG: Found row to highlight', row);
								row.classList.add('highlight-' + highlightAction);
								// Scroll the row into view
								row.scrollIntoView({ behavior: 'smooth', block: 'center' });
								break;
							}
						}
					}, 100); // Small delay to ensure DOM is fully loaded
				}
			});

			// Global table sorting function
			function sortTable(fieldName) {
				console.log('üîç DEBUG: Sorting by field:', fieldName);
				const urlParams = new URLSearchParams(window.location.search);
				const currentSort = urlParams.get('sort');
				const currentDirection = urlParams.get('direction') || 'asc';
				
				console.log('üîç DEBUG: Current sort:', currentSort, 'direction:', currentDirection);
				
				// If clicking the same field, toggle direction
				if (currentSort === fieldName) {
					const newDirection = currentDirection === 'asc' ? 'desc' : 'asc';
					urlParams.set('direction', newDirection);
					console.log('üîç DEBUG: Toggling direction to:', newDirection);
				} else {
					// New field, start with ascending
					urlParams.set('sort', fieldName);
					urlParams.set('direction', 'asc');
					console.log('üîç DEBUG: Setting new sort field:', fieldName, 'direction: asc');
				}
				
				// Reset pagination when sorting changes
				urlParams.delete('offset');
				
				const newURL = urlParams.toString();
				console.log('üîç DEBUG: Navigating to:', newURL);
				
				// Navigate to new URL
				window.location.search = newURL;
			}
		</script>
	</body>
	</html>
}